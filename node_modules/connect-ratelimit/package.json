{
  "name": "connect-ratelimit",
  "version": "0.0.5",
  "description": "connect middleware for ratelimiting clients",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dharmafly/connect-ratelimit.git"
  },
  "keywords": [
    "connect",
    "middleware",
    "ip",
    "limit",
    "throttle",
    "bandwidth"
  ],
  "author": "",
  "license": "BSD",
  "readme": "connect-ratelimit\n=================\n\n```JavaScript\nvar limiter = require('connect-ratelimit');\n\napp = connect()\n      .use(limiter({\n        whitelist: ['127.0.0.1'],\n        blacklist: ['example.com']\n      }))\n      .use(function (req, res) {\n        res.end('Hello world!');\n      });\n```\n\nconnect-ratelimit is connect middleware for limiting the number of requests per \nclient ip/hostname to your node server.\n\nWhen a limit is reached the middleware will cancel the middleware chain early \nwith `res.end('Rate limit exceeded.')` or you can optionally check for a limit \nexceeding yourself elsewhere down the chain.\n\nAbout\n-----\n\n### Catagories\n\nCatagories serve as templates to manage different types of connecting clients.\nBy default all clients are catagorized as 'normal' but `whitelist` and `blacklist` \ncatagories also exist. \n\n#### normal\n\nBy default anyone uncatagorized will be subject to 500 requests per hour.\n\n#### whitelist\n\nBy default client names in the whitelist will be subject to 4000 requests per \nhour.\n\n#### blacklist\n\nBy default client names in the blacklist will be subject to 0 requests per 0 \ntime. In other words they will always be exceding the rate limit.\n\n### Client identification\n\nconnect-ratelimit uses the following code to identify clients:\n\n```JavaScript\nreq.headers['x-forwarded-for'] || req.connection.remoteAddress\n```\n\n\nUsage\n-----\n\n```JavaScript\nvar limiter = require('connect-ratelimit');\n```\n\nThe middleware takes an options object with the following parameters:\n\n- `whitelist`: An array of strings representing clients you wish to apply to \nthe whitelist catagory. eg. `['127.0.0.1']` for local development.\n- `blacklist`: An array of strings representing clients you wish to apply to \nthe blacklist catagory.\n- `end`: A boolean when set to false (default true) the connect chain will \ncontinue even if a client has exceeded the ratelimit. The `response` object is \naugmented with the `ratelimit` namespace. `response.ratelimit` exposes an object \nwhich contains the various details about the client including if they have past \ntheir limit as well as all other recorded clients. This is useful if you wish \nto supply your own error response to the client or any other logic.\n- `catagories`: An object representing the various *total requests* per *time* \nfor each catagory type. See below.\n\n### Configuring the different catagories\n\nThe `catagories` property of the options object for the connect-limiter allows \nyou to specify different `totalRequests` and `every` for specific catagories.\n\nA fully configured value of the `catagories` property could like this:\n\n```JavaScript\n{\n  whitelist: {\n    totalRequests: 5000,\n    every:         60 * 1000 * 1000\n  },\n  blacklist: {\n    totalRequests: 0,\n    every:         0 \n  },\n  normal: {\n    totalRequests: 5,\n    every:         60 * 1000 * 1000\n  }\n}\n```\n\nSet `totalRequests` to `0` is how to block requests from under catagory \nentirely.\n\nBelow is how you can switch from an hourly rate to a half-hourly rate for all \ncatagories but blacklist.\n\n```JavaScript\n.use(limiter({\n  whitelist: ['dharmafly.com'],\n  catagories: {\n    normal: {\n      every: (60 * 1000 * 1000) / 2\n    },\n    whitelist: {\n      every: (60 * 1000 * 1000) / 2\n    }\n  }\n}))\n```\n\nYou don't need to set every catagory, just the properties you want to change.\n\nExample\n-------\n\nconnect is required for the example to run.\n\n```bash\nnpm install connect\n```\n\nTo play with the example app run the command below and navigate to \n[localhost:4000](http://localhost:4000)\n\n```bash\nnode example.js\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dharmafly/connect-ratelimit/issues"
  },
  "_id": "connect-ratelimit@0.0.5",
  "dist": {
    "shasum": "3a057aeed4a443b8689985f76844f3b6aa59a92f"
  },
  "_from": "connect-ratelimit@0.0.5",
  "_resolved": "https://registry.npmjs.org/connect-ratelimit/-/connect-ratelimit-0.0.5.tgz"
}
